AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Sample SAM Template using Application Auto Scaling and Provisioned Concurrency

# these paraneters are set through 'sam deploy -g' or the 'bash deploy.sh' script
Parameters:

  HTTPorSQS:
    Description: HTTP or SQS for generator function
    Type: String
    AllowedValues: 
      - SQS
      - HTTP
    Default: HTTP
    ConstraintDescription: CreateSQS must specify HTTP (default) or SQS 

  CreateScaling:
    Description: Set to enable or disable the Auto Scaling Target and Policies
    Type: String
    AllowedValues: 
      - Create
      - DontCreate
    Default: Create
    ConstraintDescription: CreateScaling must specify Create (default) or DontCreate

# default values for all Lambda functions   
Globals:
  Function:
    Tracing: Active

Resources:
  # create a standard SQS queue
  MsgSQS:
    Type: AWS::SQS::Queue

  # create the load generation Lambda function
  GeneratorFunc:
    Type: AWS::Serverless::Function
    Properties:
      MemorySize: 3008
      Timeout: 30
      ReservedConcurrentExecutions: 1
      CodeUri: lambda/generator
      Handler: main
      Runtime: go1.x
      Environment:
        Variables:
          HTTPSQS: !Ref HTTPorSQS
          SQSurl: !Ref MsgSQS
          MessageAmount: '100'
          HTTPurl: !Sub 'https://${ServerlessHttpApi}.execute-api.${AWS::Region}.amazonaws.com/'
      Policies:
        - SQSSendMessagePolicy:
            QueueName: !GetAtt MsgSQS.QueueName

  # HTTP function
  HTTPFunc:
    Type: AWS::Serverless::Function
    Properties:
      MemorySize: 128
      Timeout: 5
      ReservedConcurrentExecutions: 100
      CodeUri: lambda/http
      Handler: main
      Runtime: go1.x
      Events: 
        ApiGw:
          Type: HttpApi
          Properties:
            Path: '/{proxy+}'
            Method: get
      AutoPublishAlias: live
      DeploymentPreference:
        Type: AllAtOnce
      ProvisionedConcurrencyConfig:
        ProvisionedConcurrentExecutions: 10

  # HTTP scalable target
  HTTPTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 10
      MinCapacity: 1
      ResourceId: !Sub function:${HTTPFunc}:live
      RoleARN: !Sub arn:aws:iam::${AWS::AccountId}:role/aws-service-role/lambda.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_Lambda
      ScalableDimension: lambda:function:ProvisionedConcurrency
      ServiceNamespace: lambda
    DependsOn: HTTPFuncAliaslive 
  
  # HTTP auto scaling target tracking policy
  HTTPScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: utilization
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref HTTPTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 0.9
        PredefinedMetricSpecification:
          PredefinedMetricType: LambdaProvisionedConcurrencyUtilization

  # SQS function
  SQSFunc:
    Type: AWS::Serverless::Function
    Properties:
      MemorySize: 128
      Timeout: 5
      ReservedConcurrentExecutions: 10
      CodeUri: lambda/sqs
      Handler: main
      Runtime: go1.x
      Events:
        SQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt MsgSQS.Arn
            BatchSize: 1
      AutoPublishAlias: live
      DeploymentPreference:
        Type: AllAtOnce
      ProvisionedConcurrencyConfig:
        ProvisionedConcurrentExecutions: 10
        
  # SQS scalable target
  SQSTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 10
      MinCapacity: 1
      ResourceId: !Sub function:${SQSFunc}:live
      RoleARN: !Sub arn:aws:iam::${AWS::AccountId}:role/aws-service-role/lambda.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_Lambda
      ScalableDimension: lambda:function:ProvisionedConcurrency
      ServiceNamespace: lambda
    DependsOn: SQSFuncAliaslive 

  # HTTP auto scaling target tracking policy
  SQSScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: utilization
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref SQSTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 0.9
        PredefinedMetricSpecification:
          PredefinedMetricType: LambdaProvisionedConcurrencyUtilization

Outputs:
  
  SQSQueue:
    Value: !Ref MsgSQS

  APIGW:
    Value: !Sub 'https://${ServerlessHttpApi}.execute-api.${AWS::Region}.amazonaws.com/'
